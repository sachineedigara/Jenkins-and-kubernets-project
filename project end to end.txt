Here’s a complete end-to-end Jenkins and Kubernetes project that securely manages credentials while setting up a CI/CD pipeline to build, test, and deploy an application.

Project Overview
Objective
To create a secure CI/CD pipeline using Jenkins to build, test, and deploy a sample application on a Kubernetes cluster.

Prerequisites
Jenkins server (installed locally or on a server, or deployed in Kubernetes).
Kubernetes cluster (Minikube for local development or cloud-managed services like EKS, AKS, or GKE).
Docker registry account (Docker Hub, ECR, or similar) for storing Docker images.
Basic familiarity with Git, Docker, Jenkins, and Kubernetes.
Architecture
Source Code Management: Store the application code in a GitHub repository.
Jenkins Pipeline: Define a Jenkinsfile to:
Pull the code from GitHub.
Build and test the application.
Create a Docker image, push it to a Docker registry.
Deploy the application to a Kubernetes cluster.
Kubernetes Deployment: Use Kubernetes manifests or Helm charts to deploy the application securely.
Project Steps
Step 1: Set Up Jenkins and Manage Credentials
Install Jenkins: Deploy Jenkins locally, on a server, or on Kubernetes.
Install Plugins: Add necessary plugins:
Kubernetes Plugin (for interaction with Kubernetes clusters).
Docker Pipeline Plugin (to build and push Docker images).
Git Plugin (to pull code from GitHub).
Blue Ocean Plugin (optional, for enhanced UI).
Configure Jenkins Credentials:
Go to Jenkins Dashboard > Manage Jenkins > Manage Credentials and add:
Docker Registry credentials (e.g., Docker Hub login).
Kubernetes Cluster Kubeconfig or access token.
GitHub Credentials (if accessing a private repository).
Any additional secrets (API keys, DB credentials) if required for the app.
Step 2: Create Sample Application and Project Structure
Set up a sample Node.js application and organize it as follows:

plaintext
Copy code
project-directory/
├── Dockerfile
├── Jenkinsfile
├── app/
│   └── server.js
├── k8s/
│   ├── deployment.yaml
│   └── service.yaml
└── README.md
Dockerfile: Defines application containerization steps.
Jenkinsfile: Specifies the CI/CD pipeline as code.
Kubernetes Manifests: k8s/deployment.yaml and k8s/service.yaml to define Kubernetes resources.
Step 3: Write the Jenkinsfile with Secure Credentials
Here’s a secure Jenkinsfile using Jenkins credentials for GitHub, Docker registry, and Kubernetes secrets.

groovy
Copy code
pipeline {
    agent any

    environment {
        REGISTRY = "your-docker-registry"
        IMAGE_NAME = "your-app-image-name"
        IMAGE_TAG = "latest"
    }

    stages {
        stage('Clone Repository') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    git url: 'https://github.com/your-repo-url.git', credentialsId: 'github-credentials'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                            docker.image("${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}").push()
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    script {
                        sh 'kubectl apply -f k8s/deployment.yaml'
                        sh 'kubectl apply -f k8s/service.yaml'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment succeeded!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
Step 4: Define Kubernetes Secrets for Sensitive Data
Store sensitive data (e.g., database passwords, API keys) securely in Kubernetes secrets.

bash
Copy code
kubectl create secret generic app-secret \
  --from-literal=DB_USER='your-db-user' \
  --from-literal=DB_PASSWORD='your-db-password' \
  --from-literal=API_KEY='your-api-key'
Step 5: Kubernetes Manifests with Secret References
Define the deployment YAML file k8s/deployment.yaml, referencing the Kubernetes secret for sensitive information.

yaml
Copy code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
    spec:
      containers:
      - name: sample-app
        image: your-docker-registry/your-app-image-name:latest
        ports:
        - containerPort: 80
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: DB_PASSWORD
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: API_KEY
The service.yaml for a LoadBalancer service might look like this:

yaml
Copy code
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
spec:
  type: LoadBalancer
  selector:
    app: sample-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
Step 6: Dockerfile with Secure Environment Variables
Avoid embedding sensitive data in the Dockerfile. For example, expose only runtime variables in the Dockerfile:

dockerfile
Copy code
FROM node:14
WORKDIR /app
COPY . .

RUN npm install

EXPOSE 80
CMD ["node", "app/server.js"]
Step 7: Running and Testing the Pipeline
Trigger the Pipeline: Start the pipeline manually or automatically (set up a GitHub webhook).
Pipeline Process:
Jenkins pulls the latest code from the repository.
Builds the Docker image and pushes it to the Docker registry.
Deploys the application to Kubernetes using Kubernetes manifests.
Verification:
Use kubectl get pods and kubectl get services to check the deployment status.
Access the application through the external IP or URL provided by the LoadBalancer Service.
Optional Enhancements
Automated Testing: Add testing stages in the Jenkins pipeline.
Helm Charts: Use Helm for easier templating and deployment customization.
Monitoring and Alerts: Integrate Prometheus and Grafana for monitoring or set up Slack/email alerts in Jenkins.
This project securely builds a CI/CD workflow with Jenkins and Kubernetes, with emphasis on credential management.